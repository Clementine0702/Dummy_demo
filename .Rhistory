install.packages(c("UniprotR","data.table", "glue", "tidyverse"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
library(data.table)
library(glue)
library(Biostrings)
BiocManager::install("Biostrings")
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("DECIPHER")
install.packages("tidyverse")
install.packages("data.table")
library(DECIPHER)
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("DECIPHER")
install.packages("tidyverse")
install.packages("data.table")
library(DECIPHER)
library(DECIPHER)
library(DECIPHER)
library(data.table)
library(tidyverse)
install.packages("DECIPHER")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DECIPHER")
library(DECIPHER)
fread("TAS2R38_withoutgroup", fill = TRUE) #use r to read the file
spp_name <- fread("TAS2R38_withoutgroup", fill = TRUE)
readDNAStringSet("TAS2R38_refseq_transcript (1).fasta")
#install.packages("BiocManager")
BiocManager::install("DECIPHER")
library(DECIPHER)
ggplot(tree) + geom_tree() + theme_tree()
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("DECIPHER")
BiocManager::install("Biostrings")
library(DECIPHER)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("DECIPHER")
BiocManager::install("Biostrings")
library(DECIPHER)
library(ape)
myfa<-read.FASTA("TAS2R38_final.fa")
mydist<-dist.dna(myfa,model = "T92",variance=T)
mynjtree<-nj(mydist)
write.tree(mynjtree, "TAS2R38_aligned_clustalo.nwk")
library(ggtree)
library(Biostrings)
library(stringr)
library(ape)
myfa<-read.FASTA("TAS2R38_final.fa")
mydist<-dist.dna(myfa,model = "T92",variance=T)
mynjtree<-nj(mydist)
write.tree(mynjtree, "TAS2R38_aligned_clustalo.nwk")
library(ggtree)
? root.phylo
View(spp_name)
chisq.test(42, 8)
df <- c(42,8)
chisq.test(data.frame, correct = FALSE)
df
chisq.test(42, 8, correct = FALSE)
chisq.test(x=42, y=8, correct = FALSE)
knitr::opts_chunk$set(echo = TRUE)
v <- venn.diagram(list(p=p, q=q),
fill = c("orange", "blue"),
alpha = c(0.5, 0.5), cat.cex = 1.5, cex=1.5,
filename=NULL)
set1 <- c(131, 166, 85, 331, 105, 296, 102, 163, 189, 96, 111, 230, 93, 8, 34, 90, 143, 208, 218, 225, 257, 151, 187, 279, 306, 330, 271, 76, 123, 161, 233)
set2 <- c(8, 96, 102, 123, 157, 163, 166, 187, 296, 325)
set3 <- c(296, 96, 102, 166)
set4 <- c(296)
# Combine the sets
combined <- c(set1, set2, set3, set4)
# Find the unique numbers that only appear once
unique_once <- combined[duplicated(combined) == FALSE]
# Print the unique numbers
print(order(unique_once))
?order
# Create the list
list <- c("7 I", "8 R", "17 T", "74 S", "102 A", "123 R", "150 C", "166 P", "174 L", "184 W", "187 K", "188 D", "199 Y", "235 R", "250 V", "274 R", "296 I", "309 M", "325 H", "328 D", "330 R", "331 T", "332 L")
# Split each pair into two parts and keep only the first part (the number)
numbers_only <- sapply(strsplit(list, " "), "[", 1)
# Convert to numeric
numbers_only <- as.numeric(numbers_only)
# Print the result
print(numbers_only)
#chi-square test
p <- c(7, 8, 17, 74, 102, 123, 150, 166, 174, 184, 187, 188, 199, 235, 250, 274, 296, 309, 325, 328, 330, 331, 332)
q <- c(131, 166, 85, 331, 105, 296, 102, 163, 189, 96, 111, 230)
# Use intersect function to find common elements:
common_elements <- intersect(p,q)
print(common_elements)
pchisq(q=17.10864, df=2,lower.tail = F)
# Hypergeometric test
phyper(q = 4, # number of overlapping sites
m = 24, # number of sites identified by Codeml
n = 333 - 24, # number of sites not identified by Codeml
k = 12, # number of sites identified by HyPhy
lower.tail = FALSE)
install.packages("VennDiagram")
library(VennDiagram)
v <- venn.diagram(list(p=p, q=q),
fill = c("orange", "blue"),
alpha = c(0.5, 0.5), cat.cex = 1.5, cex=1.5,
filename=NULL)
grid.newpage()
grid.draw(v)
grid.newpage()
grid.draw(v)
lapply(v,  names)
# We are interested in the labels
lapply(v, function(i) i$label)
# Over-write labels (5 to 7 chosen by manual check of labels)
# in foo only
v[[5]]$label  <- paste(setdiff(p, q), collapse="\n")
# in baa only
v[[6]]$label <- paste(setdiff(p, q)  , collapse="\n")
# intesection
v[[7]]$label <- paste(intersect(p, q), collapse="\n")
# plot
grid.newpage()
grid.draw(v)
v <- venn.diagram(list(p=p, q=q),
fill = c("orange", "blue"),
alpha = c(1, 1), cat.cex = 1.5, cex=1.5,
filename=NULL)
grid.newpage()
grid.draw(v)
lapply(v,  names)
# We are interested in the labels
lapply(v, function(i) i$label)
# Over-write labels (5 to 7 chosen by manual check of labels)
# in foo only
v[[5]]$label  <- paste(setdiff(p, q), collapse="\n")
# in baa only
v[[6]]$label <- paste(setdiff(p, q)  , collapse="\n")
# intesection
v[[7]]$label <- paste(intersect(p, q), collapse="\n")
# plot
grid.newpage()
grid.draw(v)
v <- venn.diagram(list(p=p, q=q),
fill = c("orange", "blue"),
alpha = c(0.5, 0.5), cat.cex = 3, cex=3,
filename=NULL)
grid.newpage()
grid.draw(v)
lapply(v,  names)
# We are interested in the labels
lapply(v, function(i) i$label)
# Over-write labels (5 to 7 chosen by manual check of labels)
# in foo only
v[[5]]$label  <- paste(setdiff(p, q), collapse="\n")
# in baa only
v[[6]]$label <- paste(setdiff(p, q)  , collapse="\n")
# intesection
v[[7]]$label <- paste(intersect(p, q), collapse="\n")
# plot
grid.newpage()
grid.draw(v)
x
v <- venn.diagram(list(p=p, q=q),
fill = c("orange", "blue"),main.cex = 0.5,
alpha = c(0.5, 0.5), cat.cex = 1.5, cex=1.5,
filename=NULL)
grid.newpage()
grid.draw(v)
lapply(v,  names)
# We are interested in the labels
lapply(v, function(i) i$label)
# Over-write labels (5 to 7 chosen by manual check of labels)
# in foo only
v[[5]]$label  <- paste(setdiff(p, q), collapse="\n")
# in baa only
v[[6]]$label <- paste(setdiff(p, q)  , collapse="\n")
# intesection
v[[7]]$label <- paste(intersect(p, q), collapse="\n")
# plot
grid.newpage()
grid.draw(v)
v <- venn.diagram(list(p=p, q=q),
fill = c("orange", "blue"),main.cex = 0.3,
alpha = c(0.5, 0.5), cat.cex = 1.5, cex=1.5,
filename=NULL)
grid.newpage()
grid.draw(v)
lapply(v,  names)
# We are interested in the labels
lapply(v, function(i) i$label)
# Over-write labels (5 to 7 chosen by manual check of labels)
# in foo only
v[[5]]$label  <- paste(setdiff(p, q), collapse="\n")
# in baa only
v[[6]]$label <- paste(setdiff(p, q)  , collapse="\n")
# intesection
v[[7]]$label <- paste(intersect(p, q), collapse="\n")
# plot
grid.newpage()
grid.draw(v)
v <- venn.diagram(list(p=p, q=q),
fill = c("orange", "blue"),main.cex = 0.1,
alpha = c(0.5, 0.5), cat.cex = 1.5, cex=1.5,
filename=NULL)
grid.newpage()
grid.draw(v)
lapply(v,  names)
# We are interested in the labels
lapply(v, function(i) i$label)
# Over-write labels (5 to 7 chosen by manual check of labels)
# in foo only
v[[5]]$label  <- paste(setdiff(p, q), collapse="\n")
# in baa only
v[[6]]$label <- paste(setdiff(p, q)  , collapse="\n")
# intesection
v[[7]]$label <- paste(intersect(p, q), collapse="\n")
# plot
grid.newpage()
grid.draw(v)
v <- venn.diagram(list(p=p, q=q),
fill = c("orange", "blue"),main.cex = 0.01,
alpha = c(0.5, 0.5), cat.cex = 1.5, cex=1.5,
filename=NULL)
grid.newpage()
grid.draw(v)
lapply(v,  names)
# We are interested in the labels
lapply(v, function(i) i$label)
# Over-write labels (5 to 7 chosen by manual check of labels)
# in foo only
v[[5]]$label  <- paste(setdiff(p, q), collapse="\n")
# in baa only
v[[6]]$label <- paste(setdiff(p, q)  , collapse="\n")
# intesection
v[[7]]$label <- paste(intersect(p, q), collapse="\n")
# plot
grid.newpage()
grid.draw(v)
v <- venn.diagram(list(p=p, q=q),
fill = c("orange", "blue"),main.cex = 1,
alpha = c(0.5, 0.5), cat.cex = 1.5, cex=1.5,
filename=NULL)
grid.newpage()
grid.draw(v)
lapply(v,  names)
# We are interested in the labels
lapply(v, function(i) i$label)
# Over-write labels (5 to 7 chosen by manual check of labels)
# in foo only
v[[5]]$label  <- paste(setdiff(p, q), collapse="\n")
# in baa only
v[[6]]$label <- paste(setdiff(p, q)  , collapse="\n")
# intesection
v[[7]]$label <- paste(intersect(p, q), collapse="\n")
# plot
grid.newpage()
grid.draw(v)
v <- venn.diagram(list(p=p, q=q),lwd=5,
fill = c("orange", "blue"),main.cex = 1,
alpha = c(0.5, 0.5), cat.cex = 1.5, cex=1.5,
filename=NULL)
grid.newpage()
grid.draw(v)
lapply(v,  names)
# We are interested in the labels
lapply(v, function(i) i$label)
# Over-write labels (5 to 7 chosen by manual check of labels)
# in foo only
v[[5]]$label  <- paste(setdiff(p, q), collapse="\n")
# in baa only
v[[6]]$label <- paste(setdiff(p, q)  , collapse="\n")
# intesection
v[[7]]$label <- paste(intersect(p, q), collapse="\n")
# plot
grid.newpage()
grid.draw(v)
v <- venn.diagram(list(p=p, q=q),
fill = c("orange", "blue"),main.cex = 1,cex=5,
alpha = c(0.5, 0.5), cat.cex = 1.5, cex=1.5,
filename=NULL)
v <- venn.diagram(list(p=p, q=q),
fill = c("orange", "blue"),main.cex = 1,cex=3,
alpha = c(0.5, 0.5), cat.cex = 1.5, cex=1.5,
filename=NULL)
v <- venn.diagram(list(p=p, q=q),
fill = c("orange", "blue"),main.cex = 1,
alpha = c(0.5, 0.5), cat.cex = 1.5, cex=3,
filename=NULL)
grid.newpage()
grid.draw(v)
lapply(v,  names)
# We are interested in the labels
lapply(v, function(i) i$label)
# Over-write labels (5 to 7 chosen by manual check of labels)
# in foo only
v[[5]]$label  <- paste(setdiff(p, q), collapse="\n")
# in baa only
v[[6]]$label <- paste(setdiff(p, q)  , collapse="\n")
# intesection
v[[7]]$label <- paste(intersect(p, q), collapse="\n")
# plot
grid.newpage()
grid.draw(v)
v <- venn.diagram(list(p=p, q=q),
fill = c("orange", "blue"),main.cex = 1,
alpha = c(0.5, 0.5), cat.cex = 1.5, cex=0.5,
filename=NULL)
grid.newpage()
grid.draw(v)
lapply(v,  names)
# We are interested in the labels
lapply(v, function(i) i$label)
# Over-write labels (5 to 7 chosen by manual check of labels)
# in foo only
v[[5]]$label  <- paste(setdiff(p, q), collapse="\n")
# in baa only
v[[6]]$label <- paste(setdiff(p, q)  , collapse="\n")
# intesection
v[[7]]$label <- paste(intersect(p, q), collapse="\n")
# plot
grid.newpage()
grid.draw(v)
v <- venn.diagram(list(p=p, q=q),
fill = c("orange", "blue"),main.cex = 1,
alpha = c(0.5, 0.5), cat.cex = 1.5, cex=1,
filename=NULL)
grid.newpage()
grid.draw(v)
lapply(v,  names)
# We are interested in the labels
lapply(v, function(i) i$label)
# Over-write labels (5 to 7 chosen by manual check of labels)
# in foo only
v[[5]]$label  <- paste(setdiff(p, q), collapse="\n")
# in baa only
v[[6]]$label <- paste(setdiff(p, q)  , collapse="\n")
# intesection
v[[7]]$label <- paste(intersect(p, q), collapse="\n")
# plot
grid.newpage()
grid.draw(v)
v <- venn.diagram(list(p=p, q=q),
fill = c("orange", "blue"),main.cex = 1,
alpha = c(0.5, 0.5), cat.cex = 1.5, cex=0.8,
filename=NULL)
grid.newpage()
grid.draw(v)
lapply(v,  names)
# We are interested in the labels
lapply(v, function(i) i$label)
# Over-write labels (5 to 7 chosen by manual check of labels)
# in foo only
v[[5]]$label  <- paste(setdiff(p, q), collapse="\n")
# in baa only
v[[6]]$label <- paste(setdiff(p, q)  , collapse="\n")
# intesection
v[[7]]$label <- paste(intersect(p, q), collapse="\n")
# plot
grid.newpage()
grid.draw(v)
v <- venn.diagram(list(p=BEB, q=HyPhy),
fill = c("orange", "blue"),main.cex = 1,
alpha = c(0.5, 0.5), cat.cex = 1.5, cex=0.8,
filename=NULL)
v <- venn.diagram(list(BEB=p, HyPhy=q),
fill = c("orange", "blue"),main.cex = 1,
alpha = c(0.5, 0.5), cat.cex = 1.5, cex=0.8,
filename=NULL)
grid.newpage()
grid.draw(v)
lapply(v,  names)
# We are interested in the labels
lapply(v, function(i) i$label)
# Over-write labels (5 to 7 chosen by manual check of labels)
# in foo only
v[[5]]$label  <- paste(setdiff(p, q), collapse="\n")
# in baa only
v[[6]]$label <- paste(setdiff(p, q)  , collapse="\n")
# intesection
v[[7]]$label <- paste(intersect(p, q), collapse="\n")
# plot
grid.newpage()
grid.draw(v)
getwd()
setwd("Documents/GitHub/Dummy_demo/")
library(tidyverse)
library(BiocManager)
